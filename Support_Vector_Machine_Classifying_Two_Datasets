# Support Vector Machine (SVM) to classify a simple two-class dataset using scikit-learn

# Notes:
# make_classification to generate toy data, train an SVM, evaluate it, and plot the decision boundary
# kernel="linear" gives a straight-line boundary
# Try kernel="rbf" or kernel="poly" for nonlinear separations
# C controls regularization (larger C = less regularization, tighter fit)
# With real-world data (e.g., text, images), you would scale features first (e.g., StandardScaler)

import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import numpy as np

# 1) Generate toy 2D dataset (2 classes, separable)
X, y = make_classification(
    n_samples=200, n_features=2, n_redundant=0, n_informative=2,
    n_clusters_per_class=1, class_sep=1.5, random_state=42
)

# 2) Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42, stratify=y
)

# 3) Train SVM classifier (linear kernel first)
clf = SVC(kernel="linear", C=1.0, random_state=42)
clf.fit(X_train, y_train)

# 4) Evaluate
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# 5) Visualize decision boundary
def plot_decision_boundary(clf, X, y):
    h = 0.02  # step size
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    
    plt.contourf(xx, yy, Z, alpha=0.3, cmap=plt.cm.coolwarm)
    plt.scatter(X[:, 0], X[:, 1], c=y, s=40, edgecolors='k', cmap=plt.cm.coolwarm)
    plt.title("SVM Decision Boundary")
    plt.show()

plot_decision_boundary(clf, X, y)
