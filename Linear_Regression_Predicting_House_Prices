import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline

# Example dataset
data = {
    "size_sqft": [850, 1200, 1500, 2000, 3000],
    "location": ["Downtown", "Mission", "Sunset", "Richmond", "Nob Hill"],
    "bedrooms": [2, 3, 3, 4, 5],
    "age": [10, 20, 15, 30, 5],
    "amenities": ["Garage", "Pool", "None", "Garage", "Pool"],
    "condition": ["Good", "Excellent", "Fair", "Good", "Excellent"],
    "price": [800000, 1200000, 1000000, 1500000, 2500000]
}

df = pd.DataFrame(data)

# Features and target
X = df.drop("price", axis=1)
y = df["price"]

# Define categorical and numerical features
categorical_features = ["location", "amenities", "condition"]
numerical_features = ["size_sqft", "bedrooms", "age"]

# Preprocessing: scale numeric, one-hot encode categorical
preprocessor = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), numerical_features),
        ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_features)
    ]
)

# Build pipeline: preprocessing + regression
model = Pipeline(steps=[
    ("preprocessor", preprocessor),
    ("regressor", LinearRegression())
])

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit model
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

print("Predicted prices:", y_pred)

